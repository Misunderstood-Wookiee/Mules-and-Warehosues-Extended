<?xml version="1.0" encoding="iso-8859-1" ?>
<aiscript name="mule.lib.evaluate_tradeoffers" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://x4libonline.ddns.net\libraries\aiscripts.xsd" version="1">
	<!-- Compare tradeoffers by profit and return the most profitable one -->
	<params>
		<!-- list of possible buyoffers -->
		<param name="buyoffers"/>
		<!-- list of possible selloffers -->
		<param name="selloffers" />
		<!-- shipEntity that performes the trade. -->
		<!-- determines the account used to perform trades -->
		<!-- determines the cargo size -->
		<param name="shipEntity"/>
		<!-- player buy modifier to adjust supply prices -->
		<param name="sameFactionBuyMod"/>
		<!-- current amount of cargo reserved for other wares -->
		<param name="occupiedCargo"/>
		<!-- minimum cargo size for allowed transport -->
		<param name="minCargoSize"/>
		<!-- enable/disable debug messages -->
		<param name="debugchance"/>
		<param name="debugFileName"/>
		<param name="debugDirName"/>
  </params>
  <attention min="unknown">
    <actions>
			<!-- Default values for best trade -->
			<set_value name="$bestProfit" exact="0Cr" />
			<set_value name="$bestAmount" exact="0" />
			<set_value name="$bestNeedTrade" exact="null" />
			<set_value name="$bestSupplyTrade" exact="null" />

			<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'----- trade offer comparisons'" />
			<!-- nested loop(s) over the trade offers -->
			<do_all exact="$buyoffers.count" counter="$i">
				<set_value name="$someNeed" exact="$buyoffers.{$i}" />
				<do_all exact="$selloffers.count" counter="$j">
					<set_value name="$someSupply" exact="$selloffers.{$j}" />
					
					<!-- only do any work if the offers are for the same ware -->
					<do_if value="$someNeed.ware.id != $someSupply.ware.id">
						<continue />
					</do_if>
					<!-- don't allow trades between the same station -->
					<do_if value="$someNeed.buyer == $someSupply.seller ">
						<continue />
					</do_if>

					<!-- trade rule handling -->
					<!-- the buyoffer faction needs to be allowed by the selloffer faction, and vice-versa -->
					<set_value name="$someNeedRestrictionFactions" exact="$someNeed.restriction.factions" />
					<set_value name="$someNeedRestrictionInverted" exact="$someNeed.restriction.inverted" />
					<set_value name="$someSupplyRestrictionFactions" exact="$someSupply.restriction.factions" />
					<set_value name="$someSupplyRestrictionInverted" exact="$someSupply.restriction.inverted" />

					<!-- this debug block is useful for trade rule debugging and I want to leave it in the script for a while -->
					<!-- <debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'*******************************'" />
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'*_*_*_ ' +$someNeedRestrictionFactions" />
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'*_*_*_ ' +$someNeedRestrictionInverted" />
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'*_*_*_ ' +$someSupplyRestrictionFactions" />
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'*_*_*_ ' +$someSupplyRestrictionInverted" />
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'*_*_*_ ' +$someSupply.seller.owner" />
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'*_*_*_ ' +typeof $someSupply.seller.owner" />
					<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'*_*_*_ ' +(not $someNeedRestrictionFactions.indexof.{$someSupply.seller.owner})" /> -->

					<!-- trade rules are a bit wonky -->
					<!-- if tradeoffer.restriction.inverted == 1, then the list returned by tradeoffer.restriction.factions is a blacklist. -->
					<!-- This corresponds to leaving "restrict all factions" blank in the trade rule UI -->
					<!-- if tradeoffer.restriction.inverted == 0, then the list returned by tradeoffer.restriction.factions is a whitelist. -->
					<!-- This corresponds to checking the box for "restrict all factions" in the trade rule UI -->
					<!-- so we have a buyer and a seller. We need to determine if either one is disallowed from the other -->
					<!-- buyer whitelist case -->
					<!-- inverted == 0 and supply owner not in the whitelist -->
					<do_if value="($someNeedRestrictionInverted == 0) and (not $someNeedRestrictionFactions.indexof.{$someSupply.seller.owner})">
						<continue />
					</do_if>
					<!-- buyer blacklist case -->
					<!-- inverted == 1 and supply owner in blacklist -->
					<do_elseif value="($someNeedRestrictionInverted == 1) and ( $someNeedRestrictionFactions.indexof.{$someSupply.seller.owner})">
						<continue />
					</do_elseif>
					<!-- seller whitelist case -->
					<!-- inverted == 0 and need owner not in whitelist -->
					<do_elseif value="($someSupplyRestrictionInverted == 0) and (not $someSupplyRestrictionFactions.indexof.{$someNeed.buyer.owner})">
						<continue />
					</do_elseif>
					<!-- seller blacklist case -->
					<!-- inverted == 1 and supply owner in blacklist -->
					<do_elseif value="($someSupplyRestrictionInverted == 1) and ( $someSupplyRestrictionFactions.indexof.{$someNeed.buyer.owner})">
						<continue />
					</do_elseif>

					<!-- how much does the need want? -->
					<get_ware_reservation object="$someNeed.owner" type="buy" ware="$someNeed.ware" result="$needReservations" />
					<set_value name="$targetOfferedAmount" exact="$someNeed.desiredamount" />
					<!-- how much does the supply have to offer? -->
					<clamp_trade_amount trade="$someSupply" amount="$someSupply.amount" buyer="$shipEntity.assignedcontrolled" seller="$someSupply.seller" result="$affordableAmount" />
					<!-- how much can we haul? -->
					<set_value name="$cargoHauled" exact="[($shipEntity.ship.cargo.{$someSupply.ware}.max-($occupiedCargo)f/$someNeed.ware.volume)i, $shipEntity.ship.cargo.{$someNeed.ware}.free].min" />

					<!-- the amount for the trade is the minimum of the three amounts -->
					<set_value name="$tradeAmount" exact="[$targetOfferedAmount,$affordableAmount,$cargoHauled].min" />

					<!-- if there is nothing to trade, move on -->
					<do_if value="$tradeAmount == 0">
						<continue />
					</do_if>

					<!-- if the trade is too small, move on -->
					<!-- however, if the trade will finish off the build storage for that good, let it through -->
					<do_if value="($tradeAmount*$someNeed.ware.volume lt $minCargoSize) and not ($someNeed.buyer.isclass.buildstorage and ($tradeAmount == $targetOfferedAmount))">
						<continue />
					</do_if>

					<!-- how much profit for this trade? -->
					<!-- If we use our own stations, we adjust the supply price by the sameFactionBuyMod to allow preferential treatment of player/owned supply chains -->
					<do_if value="$someSupply.seller.owner == $shipEntity.owner">
						<set_value name="$currentProfit" exact="$cargoHauled * ($someNeed.unitprice - $someSupply.unitprice*$sameFactionBuyMod/100)" />
					</do_if>
					<do_else>
						<set_value name="$currentProfit" exact="$cargoHauled * ($someNeed.unitprice - $someSupply.unitprice)" />
					</do_else>

					<do_if value="$debugchance">
						<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="$someNeed.ware
											+ ' target desired amount ' + $targetOfferedAmount
											+ ' supply amount: ' + $affordableAmount
											+ ' ship can hold: ' + $cargoHauled
											+ ' amount will be: ' + $tradeAmount
											+ ' need unitprice: ' + $someNeed.unitprice
											+ ' supp unitprice: ' + $someSupply.unitprice
											+ ' faction buy modifier: ' + $sameFactionBuyMod
											+ ' profit: ' + $currentProfit.formatted.{'%.s %Cr'}" /> <!-- TODO: better debug message to show owners of tradepartners -->
					</do_if>

					<!-- if we found a new best trade, set it! -->
					<do_if value="$currentProfit > $bestProfit">
						<set_value name="$bestProfit" exact="$currentProfit" />
						<set_value name="$bestNeedTrade" exact="$someNeed" />
						<set_value name="$bestSupplyTrade" exact="$someSupply" />
						<set_value name="$bestAmount" exact="$tradeAmount" />
					</do_if>
				</do_all>
			</do_all>
			<do_if value="$bestProfit > 0">
			<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'Suggested Trade is: Buy %s %s from %s (%s) and sell to %s (%s) with %s of profit.'.[
										 $bestAmount,
										 $bestSupplyTrade.ware,
										 $bestSupplyTrade.seller.knownname,
										 $bestSupplyTrade.seller.idcode,
										 $bestNeedTrade.buyer.knownname,
										 $bestNeedTrade.buyer.idcode,
										 $bestProfit.formatted.{'%.s %Cr'}]" />
			
			</do_if>
			<do_else>
				<debug_to_file chance="$debugchance" name="$debugFileName" directory="$debugDirName" text="'no valid trade found'" />
			</do_else>
			<!-- Return the best avalible trade combination -->
			<return>
				<retval name="bestProfit" value="$bestProfit"/>
				<retval name="bestAmount" value="$bestAmount"/>
				<retval name="bestNeedTrade" value="$bestNeedTrade"/>
				<retval name="bestSupplyTrade" value="$bestSupplyTrade"/>
			</return>
    </actions>
  </attention>
</aiscript>
